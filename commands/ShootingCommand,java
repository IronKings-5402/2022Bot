package frc.robot.commands;

import edu.wpi.first.wpilibj.Encoder;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.ShootingSubsystem;
import frc.robot.Constants;


public class ShootingCommand extends CommandBase{
    @SuppressWarnings({"PMD.UnusedPrivateField", "PMD.SingularField"})
    private final ShootingSubsystem m_ShootingSubsystem; //importing the subsystem
   // Encoder encoder = new Encoder(0, 1, false, Encoder.EncodingType.k2X);
    
    /**
     * Creates a new ExampleCommand.
     *
     * @param subsystem The subsystem used by this command.
     */
    public ShootingCommand(ShootingSubsystem subsystem) {
      m_ShootingSubsystem = subsystem;
      // Use addRequirements() here to declare subsystem dependencies.
      addRequirements(subsystem);
    }
  
    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        // Configures the encoder's distance-per-pulse
    // The robot moves forward 1 foot per encoder rotation
    // There are 256 pulses per encoder rotation
    //encoder.setDistancePerPulse(1./256.);
    }
  
    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

      // sets x the the value returned by the getlimelightx function found in shooting subsystem
      double x = m_ShootingSubsystem.getXvalue(); 

       // posts X for debugging purposes
       System.out.println(x);

       // moves robot left or right based on x value of limelight to straigten it
       
       m_ShootingSubsystem.move(x);
       
 
       
       //m_ShootingSubsystem.GetEncoderValue();
       //System.out.println(m_ShootingSubsystem.GetEncoderValue());
    }
  
    // Called once the command ends or is interrupted.
  
}
