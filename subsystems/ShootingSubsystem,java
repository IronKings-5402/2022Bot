package frc.robot.subsystems;
//import edu.wpi.first.wpilibj.Encoder;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import frc.robot.Constants;
// TalonFX for our motor and ControlMode to use a percent for our motors
import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.motorcontrol.ControlMode;


public class ShootingSubsystem extends SubsystemBase {
 
  public double getXvalue(){
     //get the x value from the limelight
     NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight"); //get all values from the limelight
     NetworkTableEntry tx = table.getEntry("tx"); //get the x cordinate from the table
     double x=tx.getDouble(0); //make a double 'x' variable ; if it doesnt find the value set it to 0
        return x;}

  public TalonFX shootingMotor = new TalonFX(5); //motor 
  public double GetEncoderValue(){
        
    return shootingMotor.getSelectedSensorPosition();} // get the position of the shooter

  public void move(double xdistance){ //move the shooter to an aiming position

    if (xdistance > Constants.aimErrorTolerance) {
        System.out.println("moving right");
        
     shootingMotor.set(ControlMode.PercentOutput, 0.15);}
        
      else if ( xdistance < -Constants.aimErrorTolerance){
        System.out.println("moving left");
        shootingMotor.set(ControlMode.PercentOutput, -0.15);
      } 

      else if(xdistance<0 && xdistance> - Constants.aimErrorTolerance){
        shootingMotor.set(ControlMode.PercentOutput, -0.03);
      }
      
      else if(xdistance>0 && xdistance< Constants.aimErrorTolerance){
        shootingMotor.set(ControlMode.PercentOutput, 0.03);
      }
  }
  




   // Encoder encoder = new Encoder(0, 1, false, Encoder.EncodingType.k2X);
    /*
    TalonFX shootingMotor = new TalonFX(5);

    

    public double GetEncoderValue(){
        
        return shootingMotor.getSelectedSensorPosition();
    }*/
}
